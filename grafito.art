;==========================================
; Grafito
;
; SQLite-based Graph Database
; in ARturo
;
; @file: grafito.art
; @author: drkameleon
;==========================================

;
; The main entry point
;--------------------------

graph: function [path, body][

    ;; The initial database schema

    schema: split.by:";" {
        DROP TABLE IF EXISTS nodes;
        CREATE TABLE nodes (
            id      INTEGER PRIMARY KEY,
            tag     TEXT
        );

        CREATE INDEX IF NOT EXISTS node_tag_index ON nodes(tag);

        DROP TABLE IF EXISTS properties;
        CREATE TABLE properties (
            node        INTEGER,
            property    TEXT,
            value       TEXT,
            FOREIGN KEY (node) REFERENCES nodes(id)
        );

        CREATE INDEX IF NOT EXISTS property_node_index     ON properties(node);
        CREATE INDEX IF NOT EXISTS property_property_index ON properties(property);

        DROP TABLE IF EXISTS edges;
        CREATE TABLE edges (
            id          INTEGER PRIMARY KEY,
            tag         TEXT,
            source      INTEGER,
            target      INTEGER,
            direction   INTEGER,
            FOREIGN KEY (source) REFERENCES nodes(id),
            FOREIGN KEY (target) REFERENCES nodes(id)
        );

        CREATE INDEX IF NOT EXISTS edges_source_index ON edges(source);
        CREATE INDEX IF NOT EXISTS edges_target_index ON edges(target);
    }

    ;; initial setup

    relationships: []
    cleanpath: extract.filename path

    ;; let's open/create the database

    db: open ~"|cleanpath|.db"

    ;; and initialize it
    ;; with the given schema

    if null <> attribute "create" [
        query db schema
    ]

    ;
    ; Node creation
    ;--------------------------

    is: function [name,attributes][
        nodeId: query.id db ~"INSERT INTO nodes (tag) VALUES ('|name|')"

        loop attributes [k,v][
            query db ~"INSERT INTO properties (node,property,value) VALUES (|nodeId|,'|k|','|v|')"
        ]

        return #[
            id: nodeId
            tag: name
            properties: attributes
        ]
    ]

    ;
    ; Node check
    ;--------------------------

    isA?: function [ls,nd][
        (to :string ls) = get nd "tag"
    ]

    ;
    ; Node retrieval from id
    ;--------------------------

    node: function [nid][
        ntag: first first query db ~"SELECT tag FROM nodes WHERE id='|nid|'"
        nprops: #[]
        loop query db ~"SELECT property,value FROM properties WHERE node='|nid|'" [prop][
            set nprops first prop get prop 1
        ]

        return #[
            id: nid
            tag: ntag
            properties: nprops
        ]
    ]

    ;
    ; Edge creation
    ;--------------------------

    edge: function [src, name, tgt][
        edgeId: query.id db ~"INSERT INTO edges (tag,source,target,direction) VALUES ('|name|','|src\id|','|tgt\id|',1)"

        rezt: #[
            id: edgeId
            tag: name
            source: src
            target: tgt
        ]

        append 'relationships rezt

        return rezt
    ]

    ;
    ; Process edges
    ;--------------------------

    link: function [src, name, tgt][
        edgeId: 0

        if? :dictionary = type tgt [
            return edge src name tgt
        ]
        else [
            edges: []
            if? :dictionary = type src [
                loop tgt [t][
                    append 'edges edge src name t
                ]
            ]
            else [
                loop src [s] [
                    loop tgt [t][
                        append 'edges edge s name t
                    ]
                ]
            ]

            return edges
        ]
    ]

    ;
    ; Fetch results
    ;--------------------------

    fetch: function [name,attributes,rels][
        got: map query db ~"SELECT id FROM nodes WHERE tag='|name|'" [x][node first x]
        loop attributes [k,v][
            select 'got [item][
                props: get item 'properties
                if? key? props k [
                    v = get props k
                ]
                else [false]
            ]
        ]
        loop rels [k,v][
            select 'got [item][
                rr: query db ~"SELECT target FROM edges WHERE tag='|k|' AND source='|get item 'id|'" 

                if? 0 < size rr [
                    in? map rr [x][node first x] v
                ]
                else [false]
            ]
        ]
        return got
    ]

    ;
    ; Export to DOT file
    ;--------------------------

    export: function [links][
        preamble: {
            digraph GrafitoGraph {
                layout=neato
                graph [pad=".25", ranksep="0.25", nodesep="0.45"];
                node [fontname="FreeSans",fontsize="14",shape=circle, width=2, height=.5];
                edge [fontname="FreeSans",fontsize="12",labelfontname="FreeSans",labelfontsize="8"];
                compound=true;
                overlap=false;

                |content|
            }
        }

        content: ""
        loop links [lnk][
            append 'content ~{|lnk\source\properties\name|->|lnk\target\properties\name| [label="|lnk\tag|"]; }
        ]

        write ~"|cleanpath|.dot" ~preamble
    ]

    ;; process body

    result: do body

    ;; close the database

    close db

    ;; export relationships
    ;; to GraphViz DOT file

    ; export relationships

    ;; and that was it :)

    return result
]

;==========================================
; This is the end,
; my only friend, the end...
;==========================================
