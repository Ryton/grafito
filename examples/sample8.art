do {grafito.art}

do [

  graph.create 
	.helpers: [country person]
	.palette: 'default
	"sample8" [
        ;---------------------------------------------
        ; Populate the database
        ;---------------------------------------------

        us: put'country [name: "United States"]
        au: put'country [name: "Australia"]

        john: put'person [name: "John" surname: "Doe" age: 34]
        jane: put'person [name: "Jane" surname: "doe" age: 24]
        
        bill: put'person [name: "Bill" surname: "Jones" age: 44]
        mary: put'person [name: "Mary" age: 54]

	john ~> 'marriedTo jane
	jane ~> 'marriedTo  john; is there a way to make it reciprocal?
	bill  ~> 'marriedTo mary
	mary  ~> 'marriedTo bill

        [john mary] ~> 'isFrom us
	[jane bill] ~> 'isFrom  au

        ;---------------------------------------------
        ; Let's perform some interesting queries!
        ;---------------------------------------------

print ["    Some more interesting queries are: 	\n" 
"         ;fetch all people:				\n" 
"        	 fetch'person ø   			\n" 
							"\n"
"        ;show all people that have a surname 	 	\n" 
"        fetch'person [surname: true]   	\n" 
							"\n"
"        ;Return all people that have the name John  	\n" 
"           fetch'person [name: \"John\"]            \n" 
							"\n"
"         ;filter all people that are over 40 years old    \n" 
"           fetch'person [age: -> over: 40]	 \n" 
							"\n"
"         ;group all people that are over 40 years old  	\n" 
"         ;and have the surname \"Jones\" 			\n" 
							"\n"        
"         fetch'person [ 				\n"
"            age: -> over: 40 			\n" 
"            surname: \"Jones\" ]					\n" 
"         								\n" 
"        ; fetch all people that have the name John			\n" 
"        ; and are married to someone/anyone				\n" 
"        fetch'person [						\n" 
"            name:\"John\" 						\n" 
"            marriedTo: ø  ]						\n" 
"        								\n"
									"\n" 
"        ; fetch all people that have the name John			\n" 
"        ; and are married to someone with the name Joan		\n" 
"         fetch'person [						\n"
"            name:\"John\" marriedTo: what'person [name:\"Joan\"] ]		\n" 
"        								\n" 
									"\n" 
"        ; fetch all people that have either the name \"John\"		\n" 
"        ; or the surname \"Jones\"					\n" 
"         fetch'person .any [					\n" 
"            name:\"John\" 					\n" 
"            surname:\"Jones\"	]				\n"
"\n"
"         ; Try it yourself!"   ] ;end print
    preview fetch 'person  ø
    ]
]
